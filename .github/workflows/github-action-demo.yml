name: CI build
on:
    push:
        branches:
            - main
    pull_request:
        types: [opened, synchronize, reopened]
jobs:
    build:
        name: Build and analyze
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
            - name: Start MYSQL
              run: sudo service mysql start

            - name: Create Database from script
              run: mysql -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "source infra/mysql/dump/springboot.sql"

    selenium:
        name: Selenium
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Install Chrome Browser for Selenium
              uses: browser-actions/setup-chrome@latest

            - name: run Chrome Browser for version control
              run: chrome --version

    java:
        name: Java
        runs-on: ubuntu-latest
        needs: selenium
        steps:
            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: 21
                  distribution: 'zulu'

    sonarcloud:
        name: Sonarcloud Maven
        runs-on: ubuntu-latest
        needs: java
        steps:
            - name: Cache SonarQube packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Cache Maven packages
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('apiSpringboot/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2
            - name: Build and analyze
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=YacineRAFES_apiSpringboot
              working-directory: ./apiSpringboot

    artifact:
        name: Artifact
        runs-on: ubuntu-latest
        needs: sonarcloud
        steps:
            - name: Charging artefact #permet de charger un artefact
              uses: actions/upload-artifact@v4
              with:
                  name: package.jar
                  path: apiSpringboot/target/*.jar
                  retention-days: 1

    Discord:
        name: Discord
        runs-on: ubuntu-latest
        needs: artifact

        steps:
            - name: Discord notification
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              uses: sarisia/actions-status-discord@v1
              if: always()
              with:
                  description: 'Le projet Springboot a été build avec succès'

    docker-build-image-api:
        if: ${{ github.ref == 'refs/heads/main' }}
        runs-on: ubuntu-latest
        needs:
            - artifact
        steps:
            - uses: actions/checkout@v4

            - name: Set Up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set Up Docker Build
              uses: docker/setup-buildx-action@v3

            - name: Connect to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Download a single artifact
              uses: actions/download-artifact@v4
              with:
                  name: package.jar

            # juste pour le contrôler
            - name: List files in the repository
              run: ls ${{ github.workspace }}

            # construction de l'image docker et push sur dockerhub
            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: ./apiSpringboot
                  file: ./apiSpringboot/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/apiSpringboot:latest
            - run: echo "This job's status is ${{ job.status }}."
